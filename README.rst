.. _manual-main:

=========
DashBoard Prototype For Coffee Mutants Browser
=========

.. image:: https://img.shields.io/conda/dn/bioconda/snakemake.svg?label=Bioconda
    :target: https://bioconda.github.io/recipes/snakemake/README.html

.. image:: https://img.shields.io/pypi/pyversions/snakemake.svg
    :target: https://www.python.org

.. image:: https://img.shields.io/pypi/v/snakemake.svg
    :target: https://pypi.python.org/pypi/snakemake

.. image:: https://github.com/snakemake/snakemake/workflows/CI/badge.svg?branch=master
    :target: https://github.com/snakemake/snakemake/actions?query=branch%3Amaster+workflow%3ACI

.. image:: https://img.shields.io/badge/stack-overflow-orange.svg
    :target: https://stackoverflow.com/questions/tagged/snakemake



.. .. raw:: html
          <span class="__dimensions_badge_embed__" data-doi="https://doi.org/10.1093/bioinformatics/bts480" data-legend="always" data-style="large_rectangle"></span><script async src="https://badge.dimensions.ai/badge.js" charset="utf-8"></script>

This dashboard can be used by having a vcf file with the annotation information created using Snpeff. Once we have that the bash script in the **Parsers** folder can be used to create the required data for 
creating the dashboard.

.. _main-getting-started:

---------------
Getting started
---------------

First we need to create the conda environment using the condaenv.yaml in the **envs** folder. The environment can be created by using the following command.

.. code-block:: bash

conda env create -f envs/condaenv.yaml

Once we have created the environment we need to activate it the environment name is **Dashboard** using the command.

.. code-block:: bash  

conda activate Dashboard

Once we are in the envionment we need to make the files required to create the dashboard.

We need four files from the user.

1- snpsiftdata.csv
2- chromosome_name_mapping.csv
3- Genotype_Data.csv
4- passport.csv

-------------
SnpSift Data
-------------

This file can be created by running the script in the **Parsers** folder. Before running the script the user needs to update the location of the vcf file in the script.
For creating the snpsiftdata.csv which will be stored in the **data** folder the command is:

.. code-block:: python

    zcat all.vcf.gz | grep -v "start_retained_variant" | $CONDA_PREFIX/share/snpsift-*/scripts/vcfEffOnePerLine.pl | SnpSift extractFields -e "NA" - "ANN[*].GENE" "ANN[*].DISTANCE" CHROM POS ID REF ALT TYPE "ANN[*].IMPACT" "ANN[*].EFFECT" "ANN[*].FEATURE" "ANN[*].FEATUREID" "ANN[*].BIOTYPE" "ANN[*].RANK" > data/snpsiftdata.csv

Here the path to the vcf file needs to be changed. For us it is **all.vcf.gz** and that is why we are using **zcat** but if file id **.vcf** this should be replaced by **cat**

-------------
Chromosome Name Mapping
-------------
This information is also extracted from the vcf file and will be created once the parser is run. The script for making the **chromosome_name_mapping.csv** is:

.. code-block:: bash

    printf "Contig\\tChromosome\n" > data/chromosome_name_mapping.csv
    bcftools view -h all.vcf.gz | grep "##cont"| awk -F "=|," '{print $3 "\t" $3}' >> data/chromosome_name_mapping.csv

Here again the user needs to give the path to the **vcf file**. This script first creates a csv file with two tab seperated columns and then puts the name of the chromosomes into these columns.
At the moment both the columns consists of the same information but the user wants they can change the name of the chromosome by changing the names in the **Chromosome** column.
**Note: The values in the Contig column cannot be changed**

-------------
Geno Type Data
-------------

This data is also extraced from the vcf file and will be created once the parser script is executed. The script for making this file is:

.. code-block:: bash

    CHROM_POS=$(printf "CHROM\\tPOS\\t");
    SAMPLE_NAMES=$(bcftools query -l all.vcf.gz | paste -s -d "\t" -)
    echo "$CHROM_POS$SAMPLE_NAMES"> data/Genotype_Data.csv
    bcftools view all.vcf.gz | bcftools query -f "%CHROM\t%POS[\t%GT]\n">> data/Genotype_Data.csv

Here again the path to the vcf file needs to be updated.

-------------
Passport Data
-------------

This data needs to be provided by the user the Sample-ID is generated by the script in the parse which is:

.. code-block:: bash

    printf "Sample-ID\\tPlant-ID\\tBranch-ID\\tVariety\\tGeneration\\tTreatment\\tDose\n" > data/passport.csv
    bcftools query -l all.vcf.gz >> data/passport.csv



The format of this file is:

      +----------+----------------------------------------------------------------------+
      | Sample-ID | Plant-ID | Branch-ID | Variety   |Generation  | Treatment  | Dose   | 
      +==========+======================================================================+
      | 1-C7      | 1-C7     | NA        | Venetia   | M0         | Control    | NA     |
      +----------+----------------------------------------------------------------------+
      | 1-D4      | 1-D4     | NA        | Venetia   | M0         | Control    | NA     |
      +----------+----------------------------------------------------------------------+
      | 1-E2      | 1-E2     | NA        | Venetia   | M0         | Control    | NA     |
      +----------+----------------------------------------------------------------------+
 
All the Sample-ID are filled in the table by the parser but the rest of the information needs to be filled by the user.

-------------
Running the Parser Script
-------------

Once the required adjustments are made the user can run the parser script by:

.. code-block:: bash

    bash Parsers/parser_script

This will create all the data required for developing the dashboard.
**Note: The user needs to enter the values for **Variety** and **Generation** in the **passport.csv** otherwise the data wont be shown**

-------------
Creating the Dashboard
-------------

To create the dashboard the command that needs to be used is:

.. code-block:: bash

    python web_stage1.py

After running the above command the user can go to the URL **http://127.0.0.1:8050/** to view the dashboard.

