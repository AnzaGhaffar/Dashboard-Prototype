.. _manual-main:

#########################
Mutants Browser DashBoard
#########################

.. image:: https://img.shields.io/conda/dn/bioconda/snakemake.svg?label=Bioconda
    :target: https://bioconda.github.io/recipes/snakemake/README.html

.. image:: https://img.shields.io/pypi/pyversions/snakemake.svg
    :target: https://www.python.org

.. image:: https://img.shields.io/pypi/v/snakemake.svg
    :target: https://pypi.python.org/pypi/snakemake

.. image:: https://github.com/snakemake/snakemake/workflows/CI/badge.svg?branch=master
    :target: https://github.com/snakemake/snakemake/actions?query=branch%3Amaster+workflow%3ACI

.. image:: https://img.shields.io/badge/stack-overflow-orange.svg
    :target: https://stackoverflow.com/questions/tagged/snakemake



.. .. raw:: html
          <span class="__dimensions_badge_embed__" data-doi="https://doi.org/10.1093/bioinformatics/bts480" data-legend="always" data-style="large_rectangle"></span><script async src="https://badge.dimensions.ai/badge.js" charset="utf-8"></script>

This DashBoard provides a search interface for DNA variation. The intended purpose is a searchable catalogue of Mutant individuals that is queried by genes-of-interest or chromosome/position ranges.   
The user will need to provide a bcf/vcf file generated by SnpEff (http://snpeff.sourceforge.net/). 
The DashBoard will use the annotation information from this file and we provide a parser that will generate the data tables that the dashboard will need. 
The user can add passport information to the individuals.

.. _main-getting-started:

========================
Setting up the DashBoard
========================

-----------------------------
Install the conda environment
-----------------------------


The DashBoard will need to run in a conda environment. 

Create the environment with the condaenv.yaml in the **envs** folder like so:

.. code-block:: bash

    $ conda env create -f envs/condaenv.yaml

Once created, activate the environment **Dashboard** like so.

.. code-block:: bash  

    $ conda activate Dashboard


-------------------------
Creating the data tables
-------------------------

Prerequisite is a VCF/BCF file that has been run through SNPeff to annotated the variant effects (http://snpeff.sourceforge.net/). 
On such annotated VCF/BCF file run the parser script like so:

.. code-block:: bash

    $ bash utils/vcf_to_datatables.sh <path to input snpeff vcf/bcf>


This will generate all required data tables.

1- snpsiftdata.csv
2- chromosome_name_mapping.csv
3- Genotype_Data.csv
4- passport.csv

Note: The user now has the option to edit **passport.csv** in order to add details to individual samples and to edit the **chromosome_name_mapping.csv** and provide custom chromosome identifiers in the "Chromosome" column. 
Note that subsequent runs of the parser (vcf_to_datatables.sh) will overwrite the existing files. Details on how the tables are generated can be found further below.

----------------------
Creating the Dashboard
----------------------

With the data tables generated and in /data, run the following command to create the DashBoard:

.. code-block:: bash

    $ python web_stage1.py

Upon startup the dashboard will report where its running:

.. code-block:: bash

    Running on http://127.0.0.1:8050/
    Debugger PIN: 383-685-305
    * Serving Flask app "web_stage1" (lazy loading)
    * Environment: production
    WARNING: This is a development server. Do not use it in a production deployment.


In the above/standard case point your browser to URL **http://127.0.0.1:8050/** to view the dashboard.


=====================================
Details on generating the data tables
=====================================

We kept the extraction of relevant information from the vcf/bcf file into tables quite simple and use only standard tools.
All commands are executed when running utils/vcf_to_datatables.sh. We provide details below for transparency. 
The commands are easily tested and adjusted to meet specific needs. Example data tables are provided in /data_example for reference. 


-------------
SnpSift Data
-------------

This file is created from the <inputfile.vcf/bcf> by utils/vcf_to_datatables.sh like so:

.. code-block:: python

    bcftools view <inputfile.vcf/bcf> | grep -v "start_retained_variant" | $CONDA_PREFIX/share/snpsift-*/scripts/vcfEffOnePerLine.pl | SnpSift extractFields -e "NA" - "ANN[*].GENE" "ANN[*].DISTANCE" CHROM POS ID REF ALT TYPE "ANN[*].IMPACT" "ANN[*].EFFECT" "ANN[*].FEATURE" "ANN[*].FEATUREID" "ANN[*].BIOTYPE" "ANN[*].RANK" > data/snpsiftdata.csv


It uses snpEff/SnpSifts own functionality and scripts to extract the relevant information per variant and effect.
We are excluding lines with effect type "start_retained_variant", because SnpSift does not seem to understand this effect type.

-----------------------
Chromosome Name Mapping
-----------------------

This file is created from the <inputfile.vcf/bcf> by utils/vcf_to_datatables.sh like so:

.. code-block:: bash

    printf "Contig\\tChromosome\n" > data/chromosome_name_mapping.csv
    bcftools view -h <inputfile.vcf/bcf> | grep "##cont"| awk -F "=|," '{print $3 "\t" $3}' >> data/chromosome_name_mapping.csv

Information on chromosome names is extracted from the vcf/bcf file and recorded twice (in 2 columns), as "Contig" and "Chromosome". 
The "Contig" column must remain unchanged. By editing the "Chromosome" column the user has the option of mapping the "Contig" names to custom chromosome identifiers.  


--------------
Genotype Data
--------------

This file is created from the <inputfile.vcf/bcf> by utils/vcf_to_datatables.sh like so:

.. code-block:: bash

    CHROM_POS=$(printf "CHROM\\tPOS\\t");
    SAMPLE_NAMES=$(bcftools query -l <inputfile.vcf/bcf> | paste -s -d "\t" -)
    echo "$CHROM_POS$SAMPLE_NAMES"> data/Genotype_Data.csv
    bcftools view <inputfile.vcf/bcf> | bcftools query -f "%CHROM\t%POS[\t%GT]\n">> data/Genotype_Data.csv

It simply extracts

-------------
Passport Data
-------------

This table is initially populated with the sample names found in the VCF/BCF file in the "Sample-ID" column and "NA" in each of the data columns. 
The user will need to edit this file to provide the relevant passport information for each of the samples.
"Sample-ID" must not be edited, and it must be a complete list of samples from the VCF/BCF file and must match the sample names. 
 

.. code-block:: bash

    printf "Sample-ID\\tPlant-ID\\tBranch-ID\\tVariety\\tGeneration\\tTreatment\\tDose\n" > data/passport.csv
    a=$(bcftools query -l $annotated_vcf_gz)
    b="\tNA\tNA\tNA\tNA\tNA\tNA"
    for i in ${a[*]}; do
       echo -e $i$b >> data/passport.csv;
    done



Example passport.csv file:

      +----------+----------------------------------------------------------------------+
      | Sample-ID | Plant-ID | Branch-ID | Variety   |Generation  | Treatment  | Dose   | 
      +==========+======================================================================+
      | 1-C7      | 1-C7     | NA        | Venetia   | M0         | Control    | NA     |
      +----------+----------------------------------------------------------------------+
      | 1-D4      | 1-D4     | NA        | Venetia   | M0         | Control    | NA     |
      +----------+----------------------------------------------------------------------+
      | 1-E2      | 1-E2     | NA        | Venetia   | M0         | Control    | NA     |
      +----------+----------------------------------------------------------------------+
 

